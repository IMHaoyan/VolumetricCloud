#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

#ifndef PI
#define PI 3.14159265359
#endif

float _AerialPerspectiveDistance;
float4 _AerialPerspectiveVoxelSize;

#pragma kernel TransmittanceLutCS
RWTexture2D<float4> _TransmittanceLutResult;
#pragma kernel MultiScatteringLutCS
Texture2D<float4> _TransmittanceLut;
RWTexture2D<half4> _MultiScatteringLutResult;
#pragma kernel SkyViewLutCS
Texture2D<float4> _MultiScatteringLut;
RWTexture2D<half4> _SkyViewLutResult;
#pragma kernel AerialPerspectiveLutCS
Texture2D<float4> _SkyViewLut;
RWTexture2D<half4> _AerialPerspectiveLutResult;

SamplerState _LinearClamp;
SamplerState _PointClamp;

float SeaLevel;
float GroundRadius;
float AtmosphereHeight;
float SunLightIntensity;
float3 SunLightColor;
float SunDiskAngle;
float RayleighScatteringScale;
float RayleighScatteringScalarHeight;
float MieScatteringScale;
float MieAnisotropy;
float MieScatteringScalarHeight;
float OzoneAbsorptionScale;
float OzoneLevelCenterHeight;
float OzoneLevelWidth;
float MultiScatteringScale;

//Rayleigh
float3 RayleighCoefficient(float h) {
    float3 sigma_s_R = float3(5.802, 13.558, 33.1) * 1e-6;
    float H_R = RayleighScatteringScalarHeight; //8500
    float dh_R = exp(-h / H_R);
    return sigma_s_R * dh_R;
}

float RayleiPhase(float cos_theta) {
    return (3.0 / (16.0 * PI)) * (1.0 + cos_theta * cos_theta);
}

// Mie
float3 MieCoefficient(float h) {
    float3 sigma_s_M = (3.996).xxx * 1e-6;
    float H_M = MieScatteringScalarHeight;
    float dh_M = exp(-h / H_M);
    return sigma_s_M * dh_M;
}

float MiePhase(float cos_theta) {
    float g = MieAnisotropy;

    float a = 3.0 / (8.0 * PI);
    float b = (1.0 - g * g) / (2.0 + g * g);
    float c = 1.0 + cos_theta * cos_theta;
    float d = pow(abs(1.0 + g * g - 2 * g * cos_theta), 1.5);
    return a * b * (c / d);
}

float3 MieAbsorption(float h) {
    float3 sigma_a_M = (4.4).xxx * 1e-6;
    float H_M = MieScatteringScalarHeight;
    float dh_M = exp(-h / H_M);
    return sigma_a_M * dh_M;
}

// Ozone
float3 OzoneAbsorption(float h) {
    float3 sigma_a_O = float3(0.650f, 1.881f, 0.085f) * 1e-6;
    float center = OzoneLevelCenterHeight;
    float width = OzoneLevelWidth;
    float dh_O = max(0, 1.0 - (abs(h - center) / width)); //center最厚
    return sigma_a_O * dh_O * OzoneAbsorptionScale;
}

void UvToTransmittanceLutParams(float bottomRadius, float topRadius, float2 uv, out float mu, out float r) {
    float x_mu = uv.x;
    float x_r = uv.y;

    float H = sqrt(max(0.0f, topRadius * topRadius - bottomRadius * bottomRadius));
    float rho = H * x_r;
    r = sqrt(max(0.0f, rho * rho + bottomRadius * bottomRadius));

    float d_min = topRadius - r;
    float d_max = rho + H;
    float d = d_min + x_mu * (d_max - d_min);
    mu = d == 0.0f ? 1.0f : (H * H - rho * rho - d * d) / (2.0f * r * d);
    mu = clamp(mu, -1.0f, 1.0f);
}

float RayIntersectSphere(float3 center, float radius, float3 rayStart, float3 rayDir) {
    float OS = length(center - rayStart);
    float SH = dot(center - rayStart, rayDir);
    float OH = sqrt(OS * OS - SH * SH);
    float PH = sqrt(radius * radius - OH * OH);

    // ray miss sphere
    if (OH > radius) return -1;

    // use min distance
    float t1 = SH - PH;
    float t2 = SH + PH;
    float t = (t1 < 0) ? t2 : t1;

    return t;
}

float3 Transmittance(float3 p1, float3 p2) {
    int N_SAMPLE = 32;

    float3 dir = normalize(p2 - p1);
    float distance = length(p2 - p1);
    float ds = distance / float(N_SAMPLE);
    float3 tau = 0.0;
    float3 p = p1 + (dir * ds) * 0.5;

    for (int i = 0; i < N_SAMPLE; i++) {
        float h = length(p) - GroundRadius;

        float3 scattering = RayleighCoefficient(h) + MieCoefficient(h);
        float3 absorption = OzoneAbsorption(h) + MieAbsorption(h);
        float3 extinction = scattering + absorption;

        tau += extinction * ds;
        p += dir * ds;
    }

    return exp(-tau);
}
[numthreads(8, 8, 1)]
void TransmittanceLutCS(uint3 id : SV_DispatchThreadID) {
    float4 color = float4(0, 0, 0, 1);
    float2 uv;
    uv.x = (id.x + 0.5) / 256.0;
    uv.y = (id.y + 0.5) / 64.0;

    float bottomRadius = GroundRadius;
    float topRadius = GroundRadius + AtmosphereHeight;

    // 计算当前 uv 对应的 cos_theta, height
    float cos_theta = 0.0;
    float r = 0.0;
    UvToTransmittanceLutParams(bottomRadius, topRadius, uv, cos_theta, r);

    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);
    float3 viewDir = float3(sin_theta, cos_theta, 0);
    float3 eyePos = float3(0, r, 0);

    // 光线和大气层求交
    float dis = RayIntersectSphere(float3(0, 0, 0), GroundRadius + AtmosphereHeight, eyePos, viewDir);
    float3 hitPoint = eyePos + viewDir * dis;

    // raymarch 计算 transmittance
    color.rgb = Transmittance(eyePos, hitPoint);

    _TransmittanceLutResult[id.xy] = color;
}
// // ------------------------------------------------------------------------- //
// sigma_s * phase
float3 Scattering(float3 p, float3 lightDir, float3 viewDir) {
    float cos_theta = dot(lightDir, viewDir);

    float h = length(p) - GroundRadius;

    float3 rayleighScattering = RayleighCoefficient(h) * RayleiPhase(cos_theta);
    float3 mieScattering = MieCoefficient(h) * MiePhase(cos_theta);

    return rayleighScattering * RayleighScatteringScale + mieScattering * MieScatteringScale;
}
// // ------------------------------------------------------------------------- //

// read LUT
float2 GetTransmittanceLutUv(float bottomRadius, float topRadius, float mu, float r) {
    // 映射r高度： H（切边长度）
    float Hmax = sqrt(max(0.0f, topRadius * topRadius - bottomRadius * bottomRadius));
    float Hcurr = sqrt(max(0.0f, r * r - bottomRadius * bottomRadius));
    float x_r = Hcurr / Hmax;

    float d_min = topRadius - r;
    float d_max = Hcurr + Hmax;
    float discriminant = r * r * (mu * mu - 1.0f) + topRadius * topRadius;
    float d = max(0.0f, (-r * mu + sqrt(discriminant)));
    float x_mu = (d - d_min) / (d_max - d_min);

    return float2(x_mu, x_r);
}

//查表计算任意点 p 沿着任意方向 dir 到大气层边缘的 transmittance
float3 TransmittanceToAtmosphere(float3 p, float3 dir) {
    float bottomRadius = GroundRadius;
    float topRadius = GroundRadius + AtmosphereHeight;

    float3 upVector = normalize(p);
    float cos_theta = dot(upVector, dir);
    float r = length(p);
    float2 uv = GetTransmittanceLutUv(bottomRadius, topRadius, cos_theta, r);

    return _TransmittanceLut.SampleLevel(_LinearClamp, uv, 0).rgb;
}

// LUT Computation
float3 IntegralMultiScattering(float r, float3 lightDir) {
    //return half3(1,0,0);
    const int N_DIRECTION = 64;
    const int N_SAMPLE = 32;
    float3 RandomSphereSamples[64] = {
        float3(-0.7838, -0.620933, 0.00996137),
        float3(0.106751, 0.965982, 0.235549),
        float3(-0.215177, -0.687115, -0.693954),
        float3(0.318002, 0.0640084, -0.945927),
        float3(0.357396, 0.555673, 0.750664),
        float3(0.866397, -0.19756, 0.458613),
        float3(0.130216, 0.232736, -0.963783),
        float3(-0.00174431, 0.376657, 0.926351),
        float3(0.663478, 0.704806, -0.251089),
        float3(0.0327851, 0.110534, -0.993331),
        float3(0.0561973, 0.0234288, 0.998145),
        float3(0.0905264, -0.169771, 0.981317),
        float3(0.26694, 0.95222, -0.148393),
        float3(-0.812874, -0.559051, -0.163393),
        float3(-0.323378, -0.25855, -0.910263),
        float3(-0.1333, 0.591356, -0.795317),
        float3(0.480876, 0.408711, 0.775702),
        float3(-0.332263, -0.533895, -0.777533),
        float3(-0.0392473, -0.704457, -0.708661),
        float3(0.427015, 0.239811, 0.871865),
        float3(-0.416624, -0.563856, 0.713085),
        float3(0.12793, 0.334479, -0.933679),
        float3(-0.0343373, -0.160593, -0.986423),
        float3(0.580614, 0.0692947, 0.811225),
        float3(-0.459187, 0.43944, 0.772036),
        float3(0.215474, -0.539436, -0.81399),
        float3(-0.378969, -0.31988, -0.868366),
        float3(-0.279978, -0.0109692, 0.959944),
        float3(0.692547, 0.690058, 0.210234),
        float3(0.53227, -0.123044, -0.837585),
        float3(-0.772313, -0.283334, -0.568555),
        float3(-0.0311218, 0.995988, -0.0838977),
        float3(-0.366931, -0.276531, -0.888196),
        float3(0.488778, 0.367878, -0.791051),
        float3(-0.885561, -0.453445, 0.100842),
        float3(0.71656, 0.443635, 0.538265),
        float3(0.645383, -0.152576, -0.748466),
        float3(-0.171259, 0.91907, 0.354939),
        float3(-0.0031122, 0.9457, 0.325026),
        float3(0.731503, 0.623089, -0.276881),
        float3(-0.91466, 0.186904, 0.358419),
        float3(0.15595, 0.828193, -0.538309),
        float3(0.175396, 0.584732, 0.792038),
        float3(-0.0838381, -0.943461, 0.320707),
        float3(0.305876, 0.727604, 0.614029),
        float3(0.754642, -0.197903, -0.62558),
        float3(0.217255, -0.0177771, -0.975953),
        float3(0.140412, -0.844826, 0.516287),
        float3(-0.549042, 0.574859, -0.606705),
        float3(0.570057, 0.17459, 0.802841),
        float3(-0.0330304, 0.775077, 0.631003),
        float3(-0.938091, 0.138937, 0.317304),
        float3(0.483197, -0.726405, -0.48873),
        float3(0.485263, 0.52926, 0.695991),
        float3(0.224189, 0.742282, -0.631472),
        float3(-0.322429, 0.662214, -0.676396),
        float3(0.625577, -0.12711, 0.769738),
        float3(-0.714032, -0.584461, -0.385439),
        float3(-0.0652053, -0.892579, -0.446151),
        float3(0.408421, -0.912487, 0.0236566),
        float3(0.0900381, 0.319983, 0.943135),
        float3(-0.708553, 0.483646, 0.513847),
        float3(0.803855, -0.0902273, 0.587942),
        float3(-0.0555802, -0.374602, -0.925519),
    };
    const float uniform_phase = 1.0 / (4.0 * PI);
    const float sphereSolidAngle = 4.0 * PI / float(N_DIRECTION);
    
    float3 G_2 = float3(0, 0, 0);
    float3 f_ms = float3(0, 0, 0);

    for (int i = 0; i < N_DIRECTION; i++) {
        // 光线和大气层求交
        float3 viewDir = RandomSphereSamples[i];
        float3 rHeight = float3(0, r, 0);
        float dis = RayIntersectSphere(float3(0, 0, 0), GroundRadius + AtmosphereHeight, rHeight, viewDir);
        float d = RayIntersectSphere(float3(0, 0, 0), GroundRadius, rHeight, viewDir);
        if (d > 0) dis = min(dis, d);
        float ds = dis / float(N_SAMPLE);

        float3 p = rHeight + (viewDir * ds) * 0.5;
        float3 opticalDepth = float3(0, 0, 0);

        //march 32 steps
        for (int j = 0; j < N_SAMPLE; j++) {
            float h = length(p) - GroundRadius;
            float3 sigma_s = RayleighCoefficient(h) + MieCoefficient(h);  // scattering
            float3 sigma_a = OzoneAbsorption(h) + MieAbsorption(h);       // absorption
            float3 sigma_t = sigma_s + sigma_a;                                         // extinction
            opticalDepth += sigma_t * ds;

            float3 t1 = TransmittanceToAtmosphere(p, lightDir);
            float3 s = Scattering(p, lightDir, viewDir);
            float3 t2 = exp(-opticalDepth);
            
            // 用 1.0 代替太阳光颜色, 该变量在后续的计算中乘上去
            // d(L1) * phase   (loop of march 32 steps)
            G_2 += 1.0 * (t1 * s * t2) * ds * uniform_phase;
            // T * sigma_s * phase * dq
            f_ms += t2 * sigma_s * uniform_phase * ds;

            p += viewDir * ds;
        }
    }
    // * dw (loop of all sphereSolidAngle) = G2
    G_2 *= sphereSolidAngle;
    // * dw (loop of all sphereSolidAngle) = fms
    f_ms *= sphereSolidAngle;
    return G_2 * (1.0 / (1.0 - f_ms));
}

[numthreads(8, 8, 1)]
void MultiScatteringLutCS(uint3 id : SV_DispatchThreadID) {
    float4 color = float4(1, 1, 1, 1);
    float2 uv;
    uv.x = (id.x + 0.5) / 32.0;
    uv.y = (id.y + 0.5) / 32.0;

    float mu_s = uv.x * 2.0 - 1.0;
    float r = uv.y * AtmosphereHeight + GroundRadius;

    float cos_theta = mu_s;
    float sin_theta = sqrt(1.0 - cos_theta * cos_theta);
    float3 lightDir = float3(sin_theta, cos_theta, 0);

    color.rgb = IntegralMultiScattering(r, lightDir);
    _MultiScatteringLutResult[id.xy] = color;
}

// read LUT
float3 GetMultiScattering(float3 p, float3 lightDir) {
    float h = length(p) - GroundRadius;
    float cosSunZenithAngle = dot(normalize(p), lightDir);
    float2 uv = float2(cosSunZenithAngle * 0.5 + 0.5, h / AtmosphereHeight);
    float3 G_ALL = _MultiScatteringLut.SampleLevel(_LinearClamp, uv, 0).rgb;
    
    // G2 * sigma_s 用于在积分
    float3 sigma_s = RayleighCoefficient(h) + MieCoefficient(h);
    return G_ALL * sigma_s;
}

// ------------------------------------------------------------------------- //
//
float3 UVToViewDir(float2 uv) {
    float theta = (1.0 - uv.y) * PI;
    float phi = (uv.x * 2 - 1) * PI;
    
    float x = sin(theta) * cos(phi);
    float z = sin(theta) * sin(phi);
    float y = cos(theta);

    return float3(x, y, z);
}

float3 GetSkyView(float3 eyePos, float3 viewDir, float3 lightDir, float maxDis) {
    const int N_SAMPLE = 32;
    float3 color = float3(0, 0, 0);

    // 光线和大气层, 星球求交
    float dis = RayIntersectSphere(float3(0, 0, 0), GroundRadius + AtmosphereHeight, eyePos, viewDir);
    float d = RayIntersectSphere(float3(0, 0, 0), GroundRadius, eyePos, viewDir);
    if (dis < 0) return color;
    if (d > 0) dis = min(dis, d);
    if (maxDis > 0) dis = min(dis, maxDis);  // 带最长距离 maxDis 限制, 方便 aerial perspective lut 部分复用代码
    
    //Debug
    // if (dis == maxDis) {
    //     return float3(1, 0, 0);
    // }

    float ds = dis / float(N_SAMPLE);
    float3 p = eyePos + (viewDir * ds) * 0.5;
    float3 sunLuminance = SunLightColor * SunLightIntensity;
    float3 opticalDepth = float3(0, 0, 0);

    for (int i = 0; i < N_SAMPLE; i++) {
        float h = length(p) - GroundRadius;
        float3 sigma_t = RayleighCoefficient(h) + MieCoefficient(h) + // sigma_s
        OzoneAbsorption(h) + MieAbsorption(h);        // sigma_a
        opticalDepth += sigma_t * ds;

        float3 t1;
        // if (_withoutTransLUT) {
        //     float dis_light = RayIntersectSphere(float3(0, 0, 0), GroundRadius + AtmosphereHeight, p, lightDir);
        //     t1 = Transmittance(p, p + dis_light * lightDir);
        // } else {
        t1 = TransmittanceToAtmosphere(p, lightDir);
        //}

        float3 s = Scattering(p, lightDir, viewDir);
        float3 t2 = exp(-opticalDepth);

        // 单次散射
        float3 inScattering = t1 * s * t2 * ds * sunLuminance;
        color += inScattering;

        // 多重散射
        float3 multiScattering = GetMultiScattering(p, lightDir);
        // if (_scatter != 0) {
        color += MultiScatteringScale * multiScattering * t2 * ds * sunLuminance;
        // }
        
        p += viewDir * ds;
    }
    return color;
}

// SkyViewLut.shader
[numthreads(8, 8, 1)]
void SkyViewLutCS(uint3 id : SV_DispatchThreadID) {
    float4 color = float4(0, 0, 0, 1);
    float2 uv;
    uv.x = (id.x + 0.5) / 256.0;
    uv.y = (id.y + 0.5) / 128.0;
    float3 viewDir = UVToViewDir(uv);

    Light mainLight = GetMainLight();
    float3 lightDir = mainLight.direction; //指向太阳的方向

    float h = _WorldSpaceCameraPos.y - SeaLevel + GroundRadius;
    float3 eyePos = float3(0, h, 0);

    float maxDis = 6360000;
    color.rgb += GetSkyView(eyePos, viewDir, lightDir, maxDis);

    _SkyViewLutResult[id.xy] = color;
}


[numthreads(8, 8, 1)]
void AerialPerspectiveLutCS(uint3 id : SV_DispatchThreadID) {
    float2 uv0;
    uv0.x = (id.x + 0.5) / (32.0 * 32.0);
    uv0.y = (id.y + 0.5) / 32.0;
    float3 uv = float3(uv0, 0);
    uv.x *= _AerialPerspectiveVoxelSize.x * _AerialPerspectiveVoxelSize.z;  // X * Z
    uv.z = int(uv.x / _AerialPerspectiveVoxelSize.z) / _AerialPerspectiveVoxelSize.x;
    uv.x = fmod(uv.x, _AerialPerspectiveVoxelSize.z) / _AerialPerspectiveVoxelSize.x;
    uv.xyz += 0.5 / _AerialPerspectiveVoxelSize.xyz;

    float aspect = _ScreenParams.x / _ScreenParams.y;
    float3 viewDir = normalize(mul(unity_CameraToWorld, float4(
        (uv.x * 2.0 - 1.0) * 1.0,
        (uv.y * 2.0 - 1.0) / aspect,
        1.0, 0.0
    )).xyz);
    //return float4(viewDir, 1.0);

    Light mainLight = GetMainLight();
    float3 lightDir = mainLight.direction;
    
    float4 color = float4(0, 0, 0, 1);

    float h = _WorldSpaceCameraPos.y - SeaLevel + GroundRadius;
    float3 eyePos = float3(0, h, 0);

    float maxDis = uv.z * _AerialPerspectiveDistance;
    color.rgb = GetSkyView(eyePos, viewDir, lightDir, maxDis);

    // // transmittance
    float3 voxelPos = eyePos + viewDir * maxDis;
    float3 t1 = TransmittanceToAtmosphere(eyePos, viewDir);
    float3 t2 = TransmittanceToAtmosphere(voxelPos, viewDir);
    float3 t = t1 / t2;
    color.a = dot(t, float3(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0));
    //_AerialPerspectiveLutResult[id.xy] = float4(viewDir, 1.0);
    _AerialPerspectiveLutResult[id.xy] = color;
}